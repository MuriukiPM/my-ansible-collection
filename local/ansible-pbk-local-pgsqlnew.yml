- name: provision postgresql
  hosts: "localhost"
  gather_facts: yes
  become: yes
  no_log: false
  vars:
    ansible_python_interpreter: /usr/bin/python3
    STATE: present
    DB_NAME: "{{ lookup('env','PGSQL_NEWDB_NAME') }}"
    DB_USERNAME: "{{ lookup('env','PGSQL_NEWDB_USERNAME') }}"
    DB_USERPASS: "{{ lookup('env','PGSQL_NEWDB_USERPASS') }}"
    CONN_RANGE: "{{ lookup('env','PGSQL_NEWDB_CONN_RANGE') }}"
  tasks:
    - debug:
        msg: "DB and users to be: {{ STATE }}"
    - debug:
        msg: "New db name: {{ DB_NAME }}"
    - debug:
        msg: "New db user name: {{ DB_USERNAME }}"
    - debug:
        msg: "New db user pass:  {{ DB_USERPASS }}"
    - debug:
        msg: "Allowed connections (ip range) to db: {{ CONN_RANGE }}"
    - name: Ensure the PostgresSQL service is running
      service:
        name: postgresql
        state: started
        enabled: yes
    - name: Create/Delete database
      become: true
      become_user: postgres
      postgresql_db:
        name: "{{ DB_NAME }}"
        conn_limit: "100"
        state: "{{ STATE }}"
    - name: Add extensions to the created database
      become: true
      become_user: postgres
      postgresql_ext:
        name: "{{ item }}"
        db: "{{ DB_NAME }}"
        state: present
      loop:
        - pg_stat_statements
        - citext
    - name: Create user for new database
      become: true
      become_user: postgres
      postgresql_user:
        db: "{{ DB_NAME }}"
        name: "{{ DB_USERNAME }}"
        password: "{{ DB_USERPASS }}"
        priv: "ALL"
        expires: infinity
        state: "{{ STATE }}"
    - name: Ensure the user does not have unnecessary privileges
      become: true
      become_user: postgres
      postgresql_user:
        name: "{{ DB_USERNAME }}"
        role_attr_flags: NOSUPERUSER,NOCREATEDB
        state: present
    - name: Grant user access
      postgresql_pg_hba:
        dest: "/etc/postgresql/12/main/pg_hba.conf"
        contype: host
        users: "{{ DB_USERNAME }}"
        source: "{{ CONN_RANGE }}"
        databases: "{{ DB_NAME }}"
        method: md5
    - name: Restart PostgreSQL
      systemd:
        state: restarted
        name: postgresql
